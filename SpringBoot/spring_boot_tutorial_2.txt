/*-------------------------------------------------------------------------------*/
	
						Eureka Server -(Discovery server)

	-  Eureka Server is an application that holds the information about all client-service applications
	-  Every Micro service will register into the Eureka server and Eureka server knows all the client applications running on each port and IP address.

	- present in Spring Cloud package

	> @EnableEurekaServer 
	>  
	<dependency>
		<groupId>org.springframework.cloud</groupId>
		<artifactId>spring-cloud-starter-eureka-server</artifactId>
	</dependency>
	>
		eureka.client.registerWithEureka=false
		eureka.client.fetchRegistry=false
		server.port=8761
		
------------------------â€“ Service Registration with Eureka ----------------------

	> @EnableEurekaClient
	> properties:
		eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka
		eureka.client.instance.preferIpAddress = true
		spring.application.name = eurekaclient1

----------------------------------------------------------------------------------

							Zuul Proxy server and Routing

	- application gateway and dynamic routing 

	- Zuul Server is bundled with Spring Cloud dependency

	> @EnableZuulProxy
	> properties :
					spring.application.name=zuulserver
					zuul.routes.products.path=/api/demo/**
					zuul.routes.products.url=http://localhost:8080/
					server.port=8111

---------------------------------------------------------------------------------

						Spring Cloud Configuration Server
	- Spring Cloud Configuration Server is a centralized application that manages all the application related configuration properties. 

	> @EnableConfigServer
	>
		spring.cloud.config.server.native.searchLocations=file:///C:/configprop/
		SPRING_PROFILES_ACTIVE=native

	>Now, in file:///C:/configprop/, 
	place your client application - application.properties file.

	For example, your client application name is config-client, then rename your
	application.properties file as config-client.properties and place the properties file on the path file:///C:/configprop/. 

	> hit URL: http://localhost:8888/config-client/default/master

---------------------------------------------------------------------------------

							Admin server 
	- used in microservices
	- we can see the actuator endpoints of admin client application.

	<dependency>
		 <groupId>de.codecentric</groupId>
		 <artifactId>spring-boot-admin-server</artifactId>
		 <version>1.5.5</version>
	</dependency>

	<dependency>
		 <groupId>de.codecentric</groupId>
		 <artifactId>spring-boot-admin-server-ui</artifactId>
		 <version>1.5.5</version>
	</dependency>

	> @EnableAdminServer


						Admin Client

	 properties : spring.boot.admin.url=http://localhost:9090/

---------------------------------------------------------------------------------
				
							Spring For Apache Kafka

	<dependency>
		 <groupId>org.springframework.kafka</groupId>
		 <artifactId>spring-kafka</artifactId>
		 <version>2.1.0.RELEASE</version>
	</dependency>

	1. Producing Message : 

	@Configuration
	public class KafkaProducerConfig {
		@Bean
		public ProducerFactory<String, String> producerFactory() {
			Map<String, Object> configProps = new HashMap<>();
			configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,
			"localhost:9092");
			configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,
			StringSerializer.class);
			configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,
			StringSerializer.class);
			return new DefaultKafkaProducerFactory<>(configProps);
		}
		@Bean
		public KafkaTemplate<String, String> kafkaTemplate() {
			return new KafkaTemplate<>(producerFactory());
		}
	}

	2. To publish a message

	@Autowired
	private KafkaTemplate<String, String> kafkaTemplate;

	public void sendMessage(String msg) {
		kafkaTemplate.send(topicName, msg);
	}

	3. Consuming a Message

	@EnableKafka
	@Configuration
	public class KafkaConsumerConfig {
		@Bean
		public ConsumerFactory<String, String> consumerFactory() {
			Map<String, Object> props = new HashMap<>();
			props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,
			"localhost:2181");
			props.put(ConsumerConfig.GROUP_ID_CONFIG, "group-id");
			props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,
			StringDeserializer.class);
			props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,
			StringDeserializer.class);
			return new DefaultKafkaConsumerFactory<>(props);
		}
		@Bean
		public ConcurrentKafkaListenerContainerFactory<String, String>
			kafkaListenerContainerFactory() {
			ConcurrentKafkaListenerContainerFactory<String, String> factory =
			new ConcurrentKafkaListenerContainerFactory<>();
			factory.setConsumerFactory(consumerFactory());
			return factory;
		}
	}

	4. Listener to listen to the messages.

	@KafkaListener(topics = "tutorialspoint", groupId = "group-id")
	public void listen(String message) {
		System.out.println("Received Messasge in group - group-id: " +message);
	}

	5. Let us call the sendMessage() method from ApplicationRunner class run method from the main Spring Boot application class file and consume the message from the same class file.

	@SpringBootApplication
	public class KafkaDemoApplication implements ApplicationRunner {
		@Autowired
		private KafkaTemplate<String, String> kafkaTemplate;

		public void sendMessage(String msg) {
			kafkaTemplate.send("tutorialspoint", msg);
		}
		public static void main(String[] args) {
			SpringApplication.run(KafkaDemoApplication.class, args);
		}

		@KafkaListener(topics = "tutorialspoint", groupId = "group-id")
		public void listen(String message) {
			System.out.println("Received Messasge in- group-id: " +message);
		}

		@Override
		public void run(ApplicationArguments args) throws Exception {
			sendMessage("Hi Welcome to Spring For Apache Kafka");
		}
	}


----------------------------------------------------------------------------------
								Twilio

		- to send the SMS and make voice calls programmatically

		<dependency>
			 <groupId>com.twilio.sdk</groupId>
			 <artifactId>twilio</artifactId>
			 <version>7.16.1</version>
		</dependency>

		static {
			Twilio.init(ACCOUNT_SID, AUTH_ID);
		}

---------------------------------------------------------------------------------

							Unit test cases


------ Mockito :
	
	<dependency>
		<groupId>org.mockito</groupId>
		<artifactId>mockito-core</artifactId>
		<version>2.13.0</version>
	</dependency>

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-test</artifactId>
		<scope>test</scope>
	</dependency>

		>  @Profile("test")
		>
			@Profile("test")
			@Configuration
			public class ProductServiceTestConfiguration {
				@Bean
				@Primary
				public ProductService productService() {
					return Mockito.mock(ProductService.class);
				}
			}

	> Now, you can write a Unit Test case for Order Service under the 
	src/test/resources package.

	> 
		@SpringBootTest
		@ActiveProfiles("test")
		@RunWith(SpringJUnit4ClassRunner.class)
		public class MockitoDemoApplicationTests {
			@Autowired
			private OrderService orderService;

			@Autowired
			private ProductService productService;

			@Test
			public void whenUserIdIsProvided_thenRetrievedNameIsCorrect() {
				Mockito
					.when(productService.getProductName())
					.thenReturn("MockProduct Name");
				
				String testName = orderService.getProductName();
				Assert.assertEquals("Mock Product Name", testName);
			}
		}


-----------------------------------------------------------------------------------
								Rest Controller Unit Test

	- SpringJUnit4ClassRunner and MockMvc

	- Unit Tests should be written under the src/test/java directory and classpath resources for writing a test should be placed under the src/test/resources directory.
